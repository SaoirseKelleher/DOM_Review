---
title: "DOM Review Stats and Figures"
author: "Saoirse Kelleher"
date: today
abstract: "Compiles key statistics and figures for use in the DOM Review manuscript"
abstract-title: "Summary"
format: 
  html:
    theme: minty
    toc: true
embed-resources: true
---

# Final DOM review figures

```{r load packages}
#| include: false
library(tidyverse)
library(patchwork)
library(sf)
library(readxl)
```

# Load in review pages and randomisation sheet

Read in each page of the spreadsheet for analysis

## Article data

```{r Load article data page}
sheet_ArticleData <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                               sheet = "Article Data")
```

## Objectives

```{r Load objective page}
sheet_Objectives <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                              sheet = "Objectives") |>
  filter(`Review ID` != 0)
```

## Focal taxa

```{r Load focal taxa page}
sheet_FocalTaxa <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                             sheet = "Focal Taxa") |>
  filter(`Review ID` != 0)
```

## Study area

```{r Load study area page}
sheet_StudyArea <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                             sheet = "Study Area") |>
  filter(`Review ID` != 0)
```

## Data collection

```{r Load data collection page}
sheet_DataCollection <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                                  sheet = "Data Collection") |>
  filter(`Review ID` != 0)
```

## Covariates

```{r Load covariates page}
sheet_Covariates <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                              sheet = "Covariates") |>
  filter(`Review ID` != 0)
```

## Modelling

```{r Load modelling}
sheet_Modelling <- read_xlsx("Spreadsheets/DOM_Spreadsheet.xlsx",
                             sheet = "Modelling") |>
  filter(`Review ID` != 0)
```

## Randomisation sheets

```{r Load randomisation sheet}
randomisationSheets <- list(read_xlsx("Randomisation/Final_Randomisation.xlsx", sheet = "2004-2007"),
                            read_xlsx("Randomisation/Final_Randomisation.xlsx", sheet = "2008-2011"),
                            read_xlsx("Randomisation/Final_Randomisation.xlsx", sheet = "2012-2015"),
                            read_xlsx("Randomisation/Final_Randomisation.xlsx", sheet = "2016-2019"),
                            read_xlsx("Randomisation/Final_Randomisation.xlsx", sheet = "2020-2023")) |> 
  list_rbind()
```

# Taxa data

```{r Taxa bar plot}
focalTaxaPlot <- sheet_FocalTaxa |>
  mutate(Status = case_when(Status %in% c("CR", "EN", "NT", "VU", "Threatened_Other") ~ "Threatened",
                            Status == "NA" ~ "Multiple species",
                            Status == "Invasive" ~ "Invasive",
                            Status == "LC" ~ "Stable")) |>
  mutate(Status = fct(Status, levels = c("Multiple species", "Invasive",
                                         "Stable", "Threatened"))) |>
  summarise(Articles = n(), .by = c(`Taxa keywords`, Status)) |>
  select(Articles, Taxa = `Taxa keywords`, Status) |>
  mutate(Taxa = case_when(Taxa == "NA" ~ "Other", .default = Taxa)) |>
  mutate(Taxa = fct(Taxa, levels = rev(c("Bird", "Mammal", "Herptile",
                                     "Invertebrate", "Other")))) |>
  
  ggplot() +
  geom_col(aes(x = Articles, y = Taxa, fill = Status)) +
  scale_fill_manual("", values = c("gray40", "plum4", "aquamarine4", "firebrick4")) +
  labs(x = "Articles", y = "") +
  theme(panel.grid = element_blank(),
        #legend.position = "top",
        legend.text = element_text(size = 20), axis.text = element_text(size = 21),
        axis.title = element_text(size = 19), axis.ticks.y = element_blank(),
        panel.background = element_rect(fill='transparent', color = NA),
        plot.background = element_rect(fill='transparent', color = NA),
        legend.background = element_rect(fill = 'transparent', color = NA))
focalTaxaPlot

ggsave("Manuscript/Figures/TaxaPlot.png",
       focalTaxaPlot, width = 10, height = 4, bg='transparent')

```

# Article data

Plot countries of first authors.

```{r Authorship countries}
sheet_ArticleData |>
  summarise(Articles = n(), .by = `First-author country`) |>
  arrange(-Articles) |>
  select(AuthorCountry = `First-author country`, Articles)
```

Determine estimated coverage

```{r Article coverage}
coveragePlot <- 
  randomisationSheets |>
  summarise(N = n(), .by = c(Year, Strata, Included)) |>
  pivot_wider(names_from = Included, values_from = N, values_fill = 0) |>
  mutate(HitRate = sum(YES)/(sum(NO)+sum(YES)),
         .by = Strata) |>
  mutate(EstRemaining = `NA`*HitRate) |>
  pivot_longer(cols = c(YES, EstRemaining), 
               names_to = 'Group', values_to = 'Articles') |>
  
  ggplot() +
  geom_col(aes(x = Year, y = Articles, fill = Group), colour = "white") +
  scale_fill_manual("",
                    limits = c("YES", "EstRemaining"),
                    labels = c("Included articles", 
                               "Estimated qualifying articles"),
                    values = c("aquamarine4", "gray70")) +
  labs(x = "", y = "Number of articles") +
  theme(panel.grid.major.x = element_blank(),
        legend.position = "top", axis.text = element_text(size = 12),
        axis.title = element_text(size = 12), legend.text = element_text(size = 12))
coveragePlot
ggsave(plot = coveragePlot, "Manuscript/Figures/CoveragePlot.jpeg",
       width = 8, height = 4)
```

# Study areas

Plot study locations

```{r Study area maps}
# Load country shapefile
countries_shp <- st_read("Analysis/SpatialData/Countries/World_Countries__Generalized_.shp", quiet = TRUE) |>
  st_transform(crs = "ESRI:54030") |>
  filter(COUNTRY != "Antarctica")


studyArea_Map <- sheet_StudyArea |>
  st_as_sf(coords = c("Centre Point (lon)", "Centre Point (lat)"),
           crs = "EPSG:4326") |>
  st_transform(crs = "ESRI:54030") |>
  
  ggplot() +
  geom_sf(data = countries_shp, colour = "gray90", fill = "gray80") +
  geom_sf(shape = 21,fill = "aquamarine4", colour = "white", alpha = 0.7, size = 2.5) +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
studyArea_Map
ggsave(plot = studyArea_Map, "Manuscript/Figures/StudiesMap.png")
```

Study area size

```{r Study area size histogram}
studyAreaPlot <- sheet_StudyArea |>
  summarise(Articles = n(), .by = Size) |>
  filter(Size != "Unspecified") |>
  
  ggplot() +
  geom_col(aes(x = Size, y = Articles),
           fill = "aquamarine4") +
  labs(x = "", y = "") +
  scale_x_discrete(labels = c("0-1", "1-10", "10-100",
                              "100-\n1000", "1000-\n10000",
                              "10000-\n100000", "100000-\n1000000",
                              "1000000+")) +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(size = 20,
                                   angle = 90,
                                   vjust = 0.5, hjust = 1),
        axis.text.y = element_blank(), axis.ticks = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA))
studyAreaPlot

ggsave("Manuscript/Figures/StudyAreaPlot.png",
       studyAreaPlot, width = 8, height = 4, bg='transparent') 
```

# Data collection

Plot study duration

```{r plot study duration}
studyDurationPlot <- sheet_DataCollection |>
  mutate(StartDay = as.numeric(as.Date(`Start month`)),
         EndDay = as.numeric(as.Date(`End month`))) |>
  mutate(StudyDuration = EndDay - StartDay) |>
  mutate(StudyMonths = (StudyDuration/30)) |>
  mutate(StudyMonths = case_when(StudyMonths == 0 ~ 1,
                                 .default = StudyMonths)) |>
  
  ggplot() +
  geom_histogram(aes(y = StudyMonths), 
                 binwidth = 0.2, fill = "aquamarine4", colour = "white") +
  geom_hline(aes(yintercept = median(StudyMonths)), 
             colour = "goldenrod3", linetype = 2, linewidth = 2) +
  labs(y = "", x = "") +
  scale_y_continuous(transform = "log10",
                     limits = c(0.5,725),
                     breaks = c(1, 6, 12, 60, 
                                120, 240, 480, 720), 
                     labels = c("1 month", "6 months", "1 year", "5 years", 
                                "10 years", "20 years", "40 years", "60 Years")) +
  theme(panel.grid = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA),
        axis.text.y = element_text(size = 23),
        axis.text.x = element_blank(), axis.ticks.x = element_blank())
studyDurationPlot
ggsave(plot = studyDurationPlot, filename = "Manuscript/Figures/Duration.png",
       height = 8, width = 4)
```

Plot site quantity

```{r plot site quantity}
siteQuantityPlot <- sheet_DataCollection |>
  mutate(`Site quantity` = as.numeric(`Site quantity`)) |>
  ggplot() +
  geom_histogram(aes(y = `Site quantity`),
                 binwidth = 0.25, fill = "aquamarine4", colour = "white") +
  geom_hline(aes(yintercept = median(`Site quantity`, na.rm = TRUE)), 
             colour = "goldenrod3", linetype = 2, linewidth = 2) +
  scale_y_continuous(transform = "log10",
                     limits = c(5, 10000),
                     breaks = c(10, 25, 50, 100, 250, 500,
                                1000, 2500, 5000, 10000)) +
  scale_x_continuous(expand = c(0,0)) +
  labs(x = "", y = "") +
  theme(panel.grid = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA),
        axis.text.y = element_text(size = 23),
        axis.text.x = element_blank(), axis.ticks.x = element_blank())
siteQuantityPlot
ggsave(plot = siteQuantityPlot, filename = "Manuscript/Figures/Sites.png",
       height = 8, width = 4)
```

Site quantity boxplots

```{r site quantity boxplots}
sheet_DataCollection |>
  mutate(`Site quantity` = as.numeric(`Site quantity`)) |>
  left_join(select(sheet_ArticleData, c(`Review ID`, `Year Strata`)), by = "Review ID") |>
  mutate(outlier = case_when(`Site quantity` >= 500 ~ TRUE,
                             .default = FALSE)) |>
  mutate(`Site quantity` = case_when(`Site quantity` > 500 ~ 500,
                                     .default = `Site quantity`)) |>
  
  ggplot(aes(x = `Year Strata`, y = `Site quantity`)) +
  geom_jitter(aes(size = outlier, shape = outlier),
              colour = "cadetblue4", width = 0.1) +
  geom_boxplot(alpha = 0.4, colour = "cadetblue4",
               width = 0.4, outliers = FALSE) +
  scale_shape_manual(limits = c(TRUE, FALSE),
                     values = c(17,16)) +
  scale_size_manual(limits = c(TRUE, FALSE),
                    values = c(3,1)) +
  labs(x = "", y = "Sites") +
  theme(legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

```

Plot primary occasion quantity

```{r plot primary occasions}
sheet_DataCollection |>
  summarise(Articles = n(), .by = `Primary occasions`) |>
  
  
  ggplot() +
  geom_histogram(aes(x = `Primary occasions`), fill = "cadetblue4") +
  labs(x = "Number of primary occasions", y = "Frequency") +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
```

Plot secondary occasion quantity

```{r plot secondary occasions}

sheet_DataCollection |>
  filter(!`Secondary occasions` %in% c('Unclear', 'Unspecified')) |>
  separate_wider_delim(`Secondary occasions`, delim = "-",
                       names = c("minSecondary", "maxSecondary"),
                       too_few = 'align_end') |>
  mutate(maxSecondary = as.numeric(maxSecondary)) |>
  summarise(Articles = n(), .by = maxSecondary) |>
  
  ggplot() +
  geom_histogram(aes(x = maxSecondary), fill = "cadetblue4") +
  labs(x = "Maximum secondary occasions", y = "Frequency") +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())

```

Study scale over time

```{r study scale over time}
sheet_DataCollection |>
  mutate(`Site quantity` = as.numeric(`Site quantity`)) |>
  left_join(select(sheet_ArticleData, c(`Review ID`, `Year Strata`)), by = "Review ID") |>
  filter(!`Secondary occasions` %in% c('Unclear', 'Unspecified')) |>
  separate_wider_delim(`Secondary occasions`, delim = "-",
                       names = c("minSecondary", "maxSecondary"),
                       too_few = 'align_end') |>
  mutate(maxSecondary = as.numeric(maxSecondary)) |>
  mutate(studyScale = `Site quantity`*`Primary occasions`) |>
  mutate(studyScale = case_when(studyScale > 10000 ~ 10000,
                                .default = studyScale)) |>
  mutate(outlier = case_when(studyScale >= 10000 ~ TRUE,
                             .default = FALSE)) |>
  
  ggplot(aes(x = `Year Strata`, y = studyScale)) +
  geom_jitter(aes(shape = outlier, size = outlier),
              colour = "cadetblue4", width = 0.1) +
  geom_boxplot(alpha = 0.4, colour = "cadetblue4", width = 0.4) +
  scale_shape_manual(limits = c(TRUE, FALSE),
                     values = c(17,16)) +
  scale_size_manual(limits = c(TRUE, FALSE),
                    values = c(3,1)) +
  labs(x = "", y = "Sites x Seasons") +
  theme(legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
```

# Covariates

Covariate counts

```{r Covariate counts}
covParamPlot <- sheet_Covariates |> 
  separate_longer_delim(Covariates, delim = ", ") |>
  separate_wider_delim(Covariates, delim = "_", 
                       names = c("Covariate", "Variation", 
                                 "Observation", "Relation"),
                       too_few = "align_start") |>
  separate_wider_delim(Covariate, delim = "-",
                       names = c("Category", "Covariate"),
                       too_few = "align_start") |>
  filter(`Parameter type` %in% c("Initial occupancy", "Occupancy",
                                 "Colonisation", "Extinction_Persistence",
                                 "Detection")) |>
  summarise(Covariates = n(),
            .by = c(`Review ID`, `Model ID`, `Parameter type`, Category)) |>
  complete(nesting(`Review ID`, `Model ID`, `Parameter type`), 
           Category, fill = list(Covariates = 0)) |>
  filter(Category != "None") |>
  mutate(`Parameter type` = case_when(`Parameter type` == "Extinction_Persistence" ~ "Extinction",
                                      `Parameter type` == "Occupancy" ~ "Occupancy*",
                                      .default = `Parameter type`)) |>
  mutate(Parameter = fct(`Parameter type`, 
                         levels = c("Initial occupancy", "Occupancy*",
                                    "Colonisation", "Extinction",
                                    "Detection"))) |>
  mutate(Covariates = case_when(Covariates >= 20 ~ 20,
                                .default = Covariates)) |>
  
  ggplot(aes(x = Category, y = Covariates)) +
  geom_jitter(aes(colour = Category), 
              alpha = 0.4, width = 0.2, height = 0.2) +
  geom_boxplot(aes(fill = Category), 
               outliers = FALSE, alpha = 0.3, colour = "gray60") +
  scale_fill_manual("", labels = c("Environmental covariates", "Structural covariates"),
                    values = c("aquamarine4", "plum4")) +
  scale_colour_manual("", labels = c("Environmental covariates", 
                                     "Structural covariates"),
                      values = c("aquamarine4", "plum4")) +
  scale_y_continuous(breaks = c(0, 5, 10, 15, 20),
                     labels = c("0", "5", "10", "15", "20+")) +
  labs(x = "", y = "Number of covariates considered") +
  facet_grid(cols = vars(Parameter), switch = "x") +
  theme(legend.position = "bottom", 
        axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(), 
        strip.text = element_text(size = 12, family = "Helvetica"), 
        axis.title.y = element_text(size = 13, family = "Helvetica"), 
        axis.text = element_text(size = 12, family = "Helvetica"),
        legend.text = element_text(size = 12, family = "Helvetica"))

covParamPlot
ggsave(plot = covParamPlot, filename = "Manuscript/Figures/CovParamPlot.jpeg",
       width = 8, height = 4)
```

Covariate table

```{r Covariate table}
# Covariate level summaries ------------------------------------------------
# Extract details for each covariate and get parameter counts
covariate_details <- sheet_Covariates |>
  separate_longer_delim(Covariates, delim = ", ") |>
  separate_wider_delim(Covariates, delim = "_", 
                       names = c("Covariate", "Variation", 
                                 "Observation", "Relation"),
                       too_few = "align_start") |>
  separate_wider_delim(Covariate, delim = "-",
                       names = c("Category", "Covariate"),
                       too_few = "align_start") |>
  mutate(n_overall = length(unique(`Review ID`))) |>
  mutate(n_param = length(unique(`Review ID`)), 
         .by = `Parameter type`) |>
  mutate(Dynamic = case_when(Variation %in% c("SE", "SISE", "SU") ~ TRUE,
                             .default = FALSE),
         DirectObs = case_when(Observation == "D" ~ TRUE, 
                               .default = FALSE),
         Nonlinear = case_when(Relation %in% c("N", "B") ~ TRUE,
                               .default = FALSE),
         Interaction = case_when(Relation %in% c("I", "B") ~ TRUE,
                                 .default = FALSE)) |>
  filter(!is.na(Covariate))
  
# Proportion of articles with covariate on any parameter 
covariates_PropAny <- covariate_details |>
  select(`Review ID`, Covariate, Category, n_overall) |>
  distinct() |>
  summarise(Prop_Any = n()/mean(n_overall), .by = c(Covariate, Category))

# Proportion of articles with covariate on each parameter
covariates_PropParameter <- covariate_details |>
  select(`Review ID`, Covariate, Category, `Parameter type`, n_param) |>
  distinct() |>
  summarise(Prop_Param = n()/mean(n_param), 
            .by = c(Covariate, Category, `Parameter type`)) |>
  filter(`Parameter type` %in% c("Initial occupancy", "Occupancy",
                                 "Colonisation", "Extinction_Persistence",
                                 "Detection")) |>
  pivot_wider(names_from = `Parameter type`, values_from = Prop_Param,
              values_fill = 0)

# Proportion of covariates which are dynamic
covariates_dynamic <- covariate_details |>
  select(`Review ID`, Covariate, Category, Parameter, Dynamic) |>
  filter(Parameter != "Initial occupancy") |>
  summarise(Prop_Dynamic = sum(Dynamic)/n(),
            .by = c(Category, Covariate))

# Proportion of covariates which are directly observed
covariates_direct <- covariate_details |>
  select(`Review ID`, Covariate, Category, Parameter, DirectObs) |>
  summarise(Prop_Direct = sum(DirectObs)/n(),
            .by = c(Category, Covariate))

# Proportion of articles which use each cov non-linearly
covariates_nonlinear <- covariate_details |> 
  select(`Review ID`, Covariate, Category, Nonlinear) |>
  summarise(Nonlinear = max(Nonlinear), 
            .by = c(Covariate, Category, `Review ID`)) |>
  summarise(Prop_Nonlinear = sum(Nonlinear)/n(),
            .by = c(Covariate, Category))

# Proportion of articles which use each cov in an interaction  
covariates_interact <- covariate_details |> 
  select(`Review ID`, Covariate, Category, Interaction) |>
  summarise(Interaction = max(Interaction), 
            .by = c(Covariate, Category, `Review ID`)) |>
  summarise(Prop_Interact = sum(Interaction)/n(),
            .by = c(Covariate, Category))

# Combine all for covariates
covariates_table <- covariates_PropAny |>
  full_join(covariates_PropParameter, by = join_by(Covariate, Category)) |>
  full_join(covariates_dynamic, by = join_by(Covariate, Category)) |>
  full_join(covariates_direct, by = join_by(Covariate, Category)) |>
  full_join(covariates_nonlinear, by = join_by(Covariate, Category)) |>
  full_join(covariates_interact, by = join_by(Covariate, Category)) |>
  filter(!is.na(Covariate))

# Category level summary ----------------------------------------------
categories_PropAny <- covariate_details |>
  select(`Review ID`, Category, n_overall) |>
  distinct() |>
  summarise(Prop_Any = n()/mean(n_overall), .by = c(Category))

categories_PropParameter <- covariate_details |>
  select(`Review ID`, Category, `Parameter type`, n_param) |>
  distinct() |>
  summarise(Prop_Param = n()/mean(n_param), 
            .by = c(Category, `Parameter type`)) |>
  filter(`Parameter type` %in% c("Initial occupancy", "Occupancy",
                                 "Colonisation", "Extinction_Persistence",
                                 "Detection")) |>
  pivot_wider(names_from = `Parameter type`, values_from = Prop_Param,
              values_fill = 0)

# Proportion of covariates which are dynamic
categories_dynamic <- covariate_details |>
  select(`Review ID`, Category, Parameter, Dynamic) |>
  filter(Parameter != "Initial occupancy") |>
  summarise(Prop_Dynamic = sum(Dynamic)/n(),
            .by = c(Category))

# Proportion of covariates which are directly observed
categories_direct <- covariate_details |>
  select(`Review ID`, Category, Parameter, DirectObs) |>
  summarise(Prop_Direct = sum(DirectObs)/n(),
            .by = c(Category))

# Proportion of articles which use each cov non-linearly
categories_nonlinear <- covariate_details |> 
  select(`Review ID`, Category, Nonlinear) |>
  summarise(Nonlinear = max(Nonlinear), 
            .by = c(Category, `Review ID`)) |>
  summarise(Prop_Nonlinear = sum(Nonlinear)/n(),
            .by = c(Category))

# Proportion of articles which use each cov in an interaction  
categories_interact <- covariate_details |> 
  select(`Review ID`, Category, Interaction) |>
  summarise(Interaction = max(Interaction), 
            .by = c(Category, `Review ID`)) |>
  summarise(Prop_Interact = sum(Interaction)/n(),
            .by = Category)

categories_table <- categories_PropAny |>
  full_join(categories_PropParameter, by = join_by(Category)) |>
  full_join(categories_dynamic, by = join_by(Category)) |>
  full_join(categories_direct, by = join_by(Category)) |>
  full_join(categories_nonlinear, by = join_by(Category)) |>
  full_join(categories_interact, by = join_by(Category)) |>
  mutate(Covariate = case_when(Category == "E" ~ "Environmental",
                               Category == "S" ~ "Structural"))

# Overall summary row ----------------------------------------------
overall_PropAny <- covariate_details |>
  select(`Review ID`, n_overall) |>
  distinct() |>
  summarise(Prop_Any = n()/mean(n_overall)) |>
  mutate(Category = "O", Covariate = "Overall")

overall_PropParameter <- covariate_details |>
  select(`Review ID`, `Parameter type`, n_param) |>
  distinct() |>
  summarise(Prop_Param = n()/mean(n_param), 
            .by = c(`Parameter type`)) |>
  filter(`Parameter type` %in% c("Initial occupancy", "Occupancy",
                                 "Colonisation", "Extinction_Persistence",
                                 "Detection")) |>
  pivot_wider(names_from = `Parameter type`, values_from = Prop_Param,
              values_fill = 0) |>
  mutate(Category = "O", Covariate = "Overall")

# Proportion of covariates which are dynamic
overall_dynamic <- covariate_details |>
  select(`Review ID`, Parameter, Dynamic) |>
  filter(Parameter != "Initial occupancy") |>
  summarise(Prop_Dynamic = sum(Dynamic)/n()) |>
  mutate(Category = "O", Covariate = "Overall")

# Proportion of covariates which are directly observed
overall_direct <- covariate_details |>
  select(`Review ID`, Parameter, DirectObs) |>
  summarise(Prop_Direct = sum(DirectObs)/n()) |>
  mutate(Category = "O", Covariate = "Overall")

# Proportion of articles which use each cov non-linearly
overall_nonlinear <- covariate_details |> 
  select(`Review ID`, Nonlinear) |>
  summarise(Nonlinear = max(Nonlinear), 
            .by = `Review ID`) |>
  summarise(Prop_Nonlinear = sum(Nonlinear)/n()) |>
  mutate(Category = "O", Covariate = "Overall")

# Proportion of articles which use each cov in an interaction  
overall_interact <- covariate_details |> 
  select(`Review ID`, Interaction) |>
  summarise(Interaction = max(Interaction), 
            .by = `Review ID`) |>
  summarise(Prop_Interact = sum(Interaction)/n()) |>
  mutate(Category = "O", Covariate = "Overall")

overall_row <- overall_PropAny |>
  full_join(overall_PropParameter, by = join_by(Category, Covariate)) |>
  full_join(overall_dynamic, by = join_by(Category, Covariate)) |>
  full_join(overall_direct, by = join_by(Category, Covariate)) |>
  full_join(overall_nonlinear, by = join_by(Category, Covariate)) |>
  full_join(overall_interact, by = join_by(Category, Covariate))

# Combine all summaries ----------------------------------------------------
fullCovariateSummary <- covariates_table |>
  rbind(categories_table) |>
  rbind(overall_row) |>
  mutate(across(where(is.numeric), ~ round(.x, 2)))

write_csv(fullCovariateSummary, "Manuscript/Figures/CovariateTable.csv")
```

# Objectives

Objective proportions

```{r Objective proportions}
sheet_Objectives |>
  pivot_longer(c("Demonstrate methods?", "Observe trends?", 
                 "Identify drivers?", "Test relationships?",
                 "Predict spatially?", "Predict temporally?"),
               names_to = "Objective", values_to = "ObjectiveIncluded") |>
  filter(ObjectiveIncluded == "YES") |>
  mutate(Articles = n()) |>
  summarise(ObjArticles = n(), .by = c(Objective, Articles)) |>
  mutate(PropArticles = ObjArticles/Articles) |>
  mutate(Objective = fct_reorder(Objective, PropArticles)) |>

  ggplot() + 
  geom_col(aes(y = Objective, x = PropArticles),
           fill = "cadetblue4") +
  labs(x = "Proportion of articles", y = "") +
  theme(panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank()) 
```

Objective proportions through time

```{r Objectives through time}
objectiveTrendPlot <- sheet_Objectives |>
  left_join(select(sheet_ArticleData, c(`Review ID`, `Year Strata`)), by = "Review ID") |>
  pivot_longer(c("Demonstrate methods?", "Observe trends?", 
                 "Identify drivers?", "Test relationships?",
                 "Predict spatially?", "Predict temporally?"),
               names_to = "Objective", values_to = "ObjectiveIncluded") |>
  mutate(Objective = str_replace(Objective, "\\?", "")) |>
  filter(ObjectiveIncluded == "YES") %>%
  rbind(., mutate(., `Year Strata` = "All Years")) |>
  mutate(Articles = length(unique(`Review ID`)), .by = `Year Strata`) |>
  summarise(ObjArticles = n(), .by = c(Objective, Articles, `Year Strata`)) |>
  mutate(PropArticles = (ObjArticles/Articles)*100) |>
  mutate(Objective = fct_reorder(Objective, PropArticles)) |>
  complete(Objective, `Year Strata`, fill = list(PropArticles = 0)) |>
  mutate(Strata = case_when(`Year Strata` == "All Years" ~ "left",
                            .default = "right")) |>
  mutate(Strata = fct(Strata, levels = c("left", "right"))) |>
  mutate(Objective = factor(Objective, levels = c("Demonstrate methods",
                                                  "Observe trends", 
                                                  "Identify drivers", 
                                                  "Test relationships",
                                                  "Predict spatially",
                                                  "Predict temporally"))) |>
  mutate(`Year Strata` = fct(`Year Strata`, levels = c("2004-2007",
                                                       "2008-2011",
                                                       "2012-2015", 
                                                       "2016-2019",
                                                       "2020-2023",
                                                       "All Years"))) |>
  
  ggplot() +
  geom_col(aes(x = `Year Strata`, y = PropArticles, fill = Objective),
           position = "dodge", colour = "white") + 
  scale_fill_manual("",
                    values = c("plum4", "cadetblue3", "aquamarine3",
                               "aquamarine4", "goldenrod2", "goldenrod3")) +
  scale_y_continuous(breaks = c(0, 20, 40, 60, 80),
                     limits = c(0, 80),
                     labels = c("0%", "20%", "40%", "60%", "80%")) +
  labs(y = "Percentage of studies\nwith objective", x = "") +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        legend.text = element_text(size = 15),
        axis.text = element_text(size = 15), axis.title = element_text(size = 15),
        legend.position = "bottom", strip.background = element_blank(),
        strip.text = element_blank()) +
  facet_grid(cols = vars(Strata),
             scales = "free_x", space = "free_x", drop = TRUE)
objectiveTrendPlot
ggsave(plot = objectiveTrendPlot, "Manuscript/Figures/ObjectiveTrend.jpeg",
       width = 8, height = 4)
```

Avg covariate count by objective

```{r Objective covariate count}
covsPerParam <- sheet_Covariates |>
  separate_longer_delim(Covariates, delim = ", ") |>
  mutate(n_models = length(unique(`Model ID`)), .by = `Review ID`) |>
  filter(`Parameter type` %in% c("Initial occupancy", "Occupancy",
                                 "Colonisation", "Extinction_Persistence",
                                 "Detection")) |>
  mutate(n_params = length(unique(`Parameter type`)), .by = `Review ID`) |>
  filter(Covariates != "None") |>
  summarise(CovsPerParam = n()/(max(n_params)*max(n_models)), .by = `Review ID`)

objectiveCovariatePlot <- sheet_Objectives |>
  pivot_longer(c("Demonstrate methods?", "Observe trends?", 
                 "Identify drivers?", "Test relationships?",
                 "Predict spatially?", "Predict temporally?"),
               names_to = "Objective", values_to = "ObjectiveIncluded") |>
  mutate(Objective = str_replace(Objective, "\\?", "")) |>
  filter(ObjectiveIncluded == "YES") %>%
  rbind(., mutate(., Objective = "Any Objective")) |>
  select(`Review ID`, Objective) |>
  distinct() |>
  left_join(covsPerParam, by = join_by(`Review ID`)) |>
    
  mutate(Objective = factor(Objective, levels = c("Any Objective", "Demonstrate methods",
                                                  "Observe trends", 
                                                  "Identify drivers", 
                                                  "Test relationships",
                                                  "Predict spatially",
                                                  "Predict temporally"))) |>
  mutate(Objective = fct_relabel(Objective, 
                                 ~ str_replace(.x, " ", "\n"))) |>
  mutate(facet = case_when(Objective == "Any\nObjective" ~ "left",
                           .default = "right")) |>
  mutate(CovsPerParam = case_when(CovsPerParam > 10 ~ 10,
                                  .default = CovsPerParam)) |>
  
  ggplot(aes(x = Objective, y = CovsPerParam, 
             fill = Objective, colour = Objective)) +
  geom_boxplot(colour = "gray50", alpha = 0.6) +
  geom_jitter(alpha = 0.6, width = 0.1) +
  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10),
                     labels = c("0", "2", "4", "6", "8", "10+")) +
  scale_fill_manual(limits = c("Any\nObjective", "Demonstrate\nmethods", 
                               "Observe\ntrends", "Identify\ndrivers", 
                               "Test\nrelationships", "Predict\nspatially",
                               "Predict\ntemporally"),
                    values = c("gray60", "plum4", "cadetblue3", "aquamarine3",
                               "aquamarine4", "goldenrod2", "goldenrod3")) +
  scale_colour_manual(limits = c("Any\nObjective", "Demonstrate\nmethods", 
                                 "Observe\ntrends", "Identify\ndrivers", 
                                 "Test\nrelationships", "Predict\nspatially",
                                 "Predict\ntemporally"),
                      values = c("gray60", "plum4", "cadetblue3", "aquamarine3",
                                 "aquamarine4", "goldenrod2", "goldenrod3")) +
  labs(x = "", y = "Number of covariates\nconsidered per parameter") +
  facet_grid(cols = vars(facet), scales = "free_x", space = "free_x") +
  theme(legend.position = "none",
        panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
        legend.text = element_text(size = 15), axis.text = element_text(size = 13),
        axis.title = element_text(size = 15), strip.background = element_blank(),
        strip.text = element_blank()) 
objectiveCovariatePlot
ggsave(plot = objectiveCovariatePlot, "Manuscript/Figures/ObjectiveCovariates.jpeg",
       width = 8, height = 4)
```

Combined plot

```{r combined objective plot}
stackedObjectivePlot <- objectiveTrendPlot / objectiveCovariatePlot +
   plot_annotation(tag_levels = 'A')
stackedObjectivePlot

ggsave(plot = stackedObjectivePlot, "Manuscript/Figures/ObjectiveFigure.jpeg",
       width = 12, height = 8)
```

# Modelling

Bayes/Freq/All table

need:

n articles in each category

median covariates per core param

n using each selection method

n which look at fit

n which evaluate

```{r modelling table}
# get number of covariates per parameter for each model
modelling_Covariates <- sheet_Covariates |>
  separate_longer_delim(Covariates, delim = ", ") |>
  mutate(n_models = length(unique(`Model ID`)), .by = `Review ID`) |>
  filter(`Parameter type` %in% c("Initial occupancy", "Occupancy",
                                 "Colonisation", "Extinction_Persistence",
                                 "Detection")) |>
  mutate(n_params = length(unique(`Parameter type`)), .by = `Review ID`) |>
  filter(Covariates != "None") |>
  summarise(CovsPerParam = n()/(max(n_params)*max(n_models)), .by = `Review ID`)
  
# compose table
modelling_details <- sheet_Modelling |>
  mutate(n_Overall = length(unique(`Review ID`))) |>
  mutate(n_Class = length(unique(`Review ID`)),
         .by = `Model class`) |>
  separate_longer_delim(`Performance evaluation`, ", ") |>
  separate_longer_delim(`Selection method`, ", ") |>
  mutate(GOF = case_when(`Performance evaluation` %in% c("GOF", "BayesianP") ~ TRUE,
                         .default = FALSE),
         Evaluate = case_when(`Performance evaluation` %in% c("Validation_In", "Validation_Out") ~ TRUE,
                         .default = FALSE)) |>
  mutate(Select = 1) |>
  pivot_wider(names_from = `Selection method`, 
              values_from = Select, values_fill = 0) |>
  summarise(GOF = max(GOF), Evaluate = max(Evaluate),
            `Model averaging` = max(`Model averaging`),
            `A priori` = max(`A priori`), 
            Sequential = max(Sequential), Simple = max(Simple),
            Candidate = max(`Candidate set`),
            .by = c(`Review ID`, `Model class`, n_Class, n_Overall)) |>
  left_join(modelling_Covariates, by = join_by(`Review ID`)) |>
  filter(`Model class` != "Other")

modelling_byClass <- modelling_details |>
  summarise(Number = mean(n_Class),
            MedianCovs = median(CovsPerParam, na.rm = TRUE),
            Prop_ModAvg = sum(`Model averaging`)/mean(n_Class),
            Prop_AnySelect = 1-(sum(`A priori`)/mean(n_Class)),
            Prop_Sequential = sum(Sequential)/mean(n_Class),
            Prop_Simple = sum(Simple)/mean(n_Class),
            Prop_Candidate = sum(Candidate)/mean(n_Class),
            Prop_GOF = sum(GOF)/mean(n_Class),
            Prop_Eval = sum(Evaluate)/mean(n_Class),
            .by = `Model class`) |>
  mutate(across(where(is.numeric), ~ round(.x, 2)))
  
modelling_overall <- modelling_details |>
  summarise(Number = mean(n_Overall),
            MedianCovs = median(CovsPerParam, na.rm = TRUE),
            Prop_ModAvg = sum(`Model averaging`)/mean(n_Overall),
            Prop_AnySelect = 1-(sum(`A priori`)/mean(n_Overall)),
            Prop_Sequential = sum(Sequential)/mean(n_Overall),
            Prop_Simple = sum(Simple)/mean(n_Overall),
            Prop_Candidate = sum(Candidate)/mean(n_Overall),
            Prop_GOF = sum(GOF)/mean(n_Overall),
            Prop_Eval = sum(Evaluate)/mean(n_Overall)) |>
  mutate(across(where(is.numeric), ~ round(.x, 2))) |>
  mutate(`Model class` = "All Models") 

modelling_summary <- rbind(modelling_byClass, modelling_overall) |>
  t() |> as.data.frame() %>%
  mutate(Variable = row.names(.)) |>
  set_names(c("Frequentist", "Bayesian", "All models", "Variable")) |>
  filter(Variable != "Model class")

write_csv(modelling_summary, "Manuscript/Figures/ModellingSummary.csv")
```
