---
title: "Analysis and figures"
author: "Saoirse Kelleher"
date: today
abstract: "Calculates key statistics and renders figures for \"*Twenty years of dynamic occupancy models: a review of applications and look to the future*\""
abstract-title: "Summary"
---

## Load packages

Required packages for analysis and plotting figures.

```{r Load packages}
#| message: false

library(tidyverse)
library(patchwork)
library(sf)
library(readxl)
library(ggtext)
```

## Load data

Two sources of data are loaded in for analysis:

-   Randomised list of all queried articles

-   Spreadsheet of included articles

#### Randomised articles

All queried articles were assigned random values in *'Randomisation.qmd'* to determine the order in which they were considered for inclusion in this review. These articles are read in from *'Randomisation.xlsx'*.

```{r Load query sheets}
sheet_AllArticles <- list(read_xlsx("Randomisation/Randomisation.xlsx", 
                                    sheet = "2004-2007"),
                          read_xlsx("Randomisation/Randomisation.xlsx", 
                                    sheet = "2008-2011"),
                          read_xlsx("Randomisation/Randomisation.xlsx", 
                                    sheet = "2012-2015"),
                          read_xlsx("Randomisation/Randomisation.xlsx", 
                                    sheet = "2016-2019"),
                          read_xlsx("Randomisation/Randomisation.xlsx", 
                                    sheet = "2020-2023")) |> 
  list_rbind()
```

#### Reviewed data

Each sheet from *'Review_Spreadsheet.xlsx'* is loaded individually.

```{r Load review sheets}
sheet_ArticleData <- read_xlsx("Review_Spreadsheet.xlsx",
                               sheet = "Article Data")
sheet_Objectives <- read_xlsx("Review_Spreadsheet.xlsx",
                              sheet = "Objectives") 
sheet_FocalTaxa <- read_xlsx("Review_Spreadsheet.xlsx",
                             sheet = "Focal Taxa") 
sheet_StudyArea <- read_xlsx("Review_Spreadsheet.xlsx",
                             sheet = "Study Area")
sheet_DataCollection <- read_xlsx("Review_Spreadsheet.xlsx",
                                  sheet = "Data Collection")
sheet_Covariates <- read_xlsx("Review_Spreadsheet.xlsx",
                              sheet = "Covariates")
sheet_Modelling <- read_xlsx("Review_Spreadsheet.xlsx",
                             sheet = "Modelling")
```

## Article inclusion

#### Articles by query

Calculate the number of articles sourced from each query, and the proportion of articles which were included in both queries.

```{r Calculate query statistics}
sheet_AllArticles |>
  mutate(Query = case_when(KeyTerms == TRUE & CitesMackenzie == TRUE ~ "Both",
                           KeyTerms == FALSE & CitesMackenzie == TRUE ~ "Mackenzie",
                           KeyTerms == TRUE & CitesMackenzie == FALSE ~ "KeyTerms")) |>
  summarise(Articles = n(), .by = Query) |>
  mutate(Proportion = round(Articles/sum(Articles), 2))
```

#### Total articles

Get the number of included articles

```{r Total article count}
sheet_AllArticles |>
  filter(Included == "YES") |>
  nrow()
```

#### Article hit rates

Calculate the hit rate for articles in each stratum, and determine how many articles are estimated to remain in each stratum based off of those hit rates.

```{r Calculate article hit rates}
# Hit rates within each stratum
stratumHitRates <- sheet_AllArticles |>
  summarise(Articles = n(), .by = c(Year, Strata, Included)) |>
  pivot_wider(names_from = Included, 
              values_from = Articles, values_fill = 0) |>
  summarise(HitRate = round(sum(YES)/(sum(NO)+sum(YES)), 2),
            .by = Strata)
stratumHitRates

# Number of remaining articles per year
remainingArticles <- sheet_AllArticles |>
  summarise(Articles = n(), .by = c(Year, Strata, Included)) |>
  pivot_wider(names_from = Included, 
              values_from = Articles, values_fill = 0) |>
  mutate(HitRate = sum(YES)/(sum(NO)+sum(YES)),
         .by = Strata) |>
  mutate(EstRemaining = round(`NA`*HitRate, 2)) |>
  select(Year, EstRemaining)
remainingArticles

# Estimating remaining qualified articles and total remaining articles
remainingProportion <- data.frame(Group = c("EstRemaining", "TotalUnreviewed"),
                                  Articles = c(sum(remainingArticles$EstRemaining),
                                               sheet_AllArticles |>
                                                 summarise(Articles = n(), .by = c(Year, Strata, Included)) |>
                                                 pivot_wider(names_from = Included, 
                                                             values_from = Articles, values_fill = 0) |>
                                                 pull(`NA`) |> 
                                                 sum()))
remainingProportion
```

#### Coverage figure

```{r Coverage figure}
#| fig-width: 8
#| fig-height: 4

plot_coverage <- 
  sheet_AllArticles |>
  summarise(N = n(), .by = c(Year, Strata, Included)) |>
  pivot_wider(names_from = Included, values_from = N, values_fill = 0) |>
  mutate(HitRate = sum(YES)/(sum(NO)+sum(YES)),
         .by = Strata) |>
  mutate(EstRemaining = `NA`*HitRate) |>
  pivot_longer(cols = c(YES, EstRemaining), 
               names_to = 'Group', values_to = 'Articles') |>
  
  ggplot() +
  geom_col(aes(x = Year, y = Articles, fill = Group), colour = "white") +
  scale_fill_manual("",
                    limits = c("YES", "EstRemaining"),
                    labels = c("Included articles", 
                               "Estimated qualifying articles"),
                    values = c("aquamarine4", "gray70")) +
  scale_y_continuous(expand = c(0,0), limits = c(0, 65)) +
  labs(x = "", y = "Number of articles") +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        legend.position = "bottom", 
        axis.text = element_text(size = 12),
        axis.text.x = element_blank(), 
        axis.ticks.x = element_blank(),
        axis.title = element_text(size = 12), 
        legend.text = element_text(size = 12),
        strip.text.x = element_text(size = 12)) +
  facet_grid(cols = vars(Strata), scales = "free_x", switch = "x")
plot_coverage
ggsave(plot = plot_coverage, "Figures/CoveragePlot.jpeg",
       width = 8, height = 4)
```

## Study areas

#### Study countries table

```{r Study location table}
sheet_StudyArea |>
  select(`Review ID`, Country) |>
  separate_longer_delim(Country, ", ") |>
  distinct() |>
  summarise(Articles = n(), .by = Country) |>
  arrange(-Articles)
```

#### Unique countries

```{r Unique countries}
sheet_StudyArea |>
  select(`Review ID`, Country) |>
  separate_longer_delim(Country, ", ") |>
  pull(Country) |>
  unique() |>
  length()
```

#### Map of study locations

```{r Study location map}
# Load country shapefile
countries_shp <- st_read("Analysis/Countries_Spatial/World_Countries__Generalized_.shp", quiet = TRUE) |>
  st_transform(crs = "ESRI:54030") |>
  filter(COUNTRY != "Antarctica")

studyArea_Map <- sheet_StudyArea |>
  st_as_sf(coords = c("Centre Point (lon)", "Centre Point (lat)"),
           crs = "EPSG:4326") |>
  st_transform(crs = "ESRI:54030") |>
  
  ggplot() +
  geom_sf(data = countries_shp, colour = "gray90", fill = "gray80") +
  geom_sf(shape = 21, fill = "aquamarine4", colour = "white", alpha = 0.5, size = 3.5) +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
studyArea_Map
ggsave(plot = studyArea_Map, "Figures/StudiesMap.png")
```

#### Study area size

```{r Study area size}
#| fig-width: 7
#| fig-height: 4

studyAreaPlot <- sheet_StudyArea |>
  summarise(Articles = n(), .by = Size) |>
  filter(Size != "Unspecified") |>
  
  ggplot() +
  geom_col(aes(x = Size, y = Articles),
           fill = "aquamarine4", colour = "white",
           width = 1, linewidth = 2) +
  labs(x = "", y = "") +
  scale_x_discrete(labels = c("< 1", "1 - 10", "10 - 10<sup>2</sup>",
                              "10<sup>2</sup> - 10<sup>3</sup>",
                              "10<sup>3</sup> - 10<sup>4</sup>",
                              "10<sup>4</sup> - 10<sup>5</sup>",
                              "10<sup>5</sup> - 10<sup>6</sup>",
                              "\\> 10<sup>6</sup>")) +
  theme(panel.grid = element_blank(),
        axis.text.x = element_markdown(size = 20, angle = 90,
                                       vjust = 0.5, hjust = 1),
        axis.text.y = element_blank(), axis.ticks = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA))
studyAreaPlot

ggsave("Figures/StudyAreaPlot.png",
       studyAreaPlot, width = 7, height = 4, bg='transparent')
```

## Study taxa

#### Multi-species statistics

```{r Multi-species stats}
sheet_FocalTaxa |>
  separate_longer_delim(`Multispecies method`, ", ") |>
  select(`Review ID`, `Multispecies method`) |>
  distinct() |>
  mutate(TotalArticles = length(unique(`Review ID`))) |>
  summarise(Articles = n(), 
            .by = c(`Multispecies method`, TotalArticles)) |>
  mutate(Proportion = round(Articles/TotalArticles, 2))
```

#### Study species

```{r Focal species figure}
#| fig-width: 10
#| fig-height: 4

focalTaxaPlot <- 
  sheet_FocalTaxa |>
  separate_longer_delim(`Taxa keywords`, delim = ", ") |>
  separate_longer_delim(Status, delim = ", ") |>
  mutate(`Taxa keywords` = case_when(`Taxa keywords` == "Fish" ~ "Other", 
                                     .default = `Taxa keywords`)) |>
  mutate(Status = case_when(Status %in% c("CR", "EN", "NT", "VU", "Threatened_Other") ~ "Threatened",
                            Status %in% c("NA", "Unclear", "DD") ~ "NA",
                            Status == "Invasive" ~ "Invasive",
                            Status == "LC" ~ "Stable")) |>
  mutate(Threatened = case_when("Threatened" %in% Status ~ TRUE,
                                .default = FALSE),
         Invasive = case_when("Invasive" %in% Status ~ TRUE,
                              .default = FALSE),
         Overall = TRUE,
         .by = c(`Review ID`, `Taxa keywords`)) |>
  select(`Review ID`, `Taxa keywords`, Threatened, Invasive, Overall) |>
  distinct() |>
  pivot_longer(cols = c(Threatened, Invasive, Overall), 
               names_to = "Group", values_to = "Value") |>
  summarise(Articles = sum(Value),
            .by = c(`Taxa keywords`, Group)) |>
  mutate(Group = fct(Group, levels = c("Overall", "Threatened",
                                       "Invasive"))) |>
  mutate(`Taxa keywords` = fct(`Taxa keywords`, 
                               levels = rev(c("Bird", "Mammal", "Herptile",
                                              "Invertebrate", "Other")))) |>
  mutate(Articles = case_when(Articles == 0 ~ 0.1, .default = Articles)) |>
  
  ggplot() +
  geom_col(aes(x = Articles, y = `Taxa keywords`, fill = Group),
           position = position_dodge2(reverse = TRUE), width = 0.8) +
  scale_fill_manual("", values = c("aquamarine4", "goldenrod2", "gray70")) +
  scale_x_continuous(expand = c(0,0)) +
  labs(x = "Articles", y = "") +
  theme(panel.grid = element_blank(),
        legend.text = element_text(size = 20), axis.text = element_text(size = 21),
        axis.title = element_text(size = 19), axis.ticks.y = element_blank(),
        panel.background = element_rect(fill='transparent', color = NA),
        plot.background = element_rect(fill='transparent', color = NA),
        legend.background = element_rect(fill = 'transparent', color = NA))
focalTaxaPlot

ggsave("Figures/TaxaPlot.png",
       focalTaxaPlot, width = 10, height = 4, bg='transparent')
```

## Data collection

#### Survey method statistics

```{r survey methods}
sheet_DataCollection |>
  separate_longer_delim(`Capture method`, ", ") |>
  select(`Review ID`, `Capture method`) |>
  distinct() |>
  mutate(TotalArticles = length(unique(`Review ID`))) |>
  summarise(Articles = n(), .by = c(`Capture method`, TotalArticles)) |>
  mutate(Proportion = round(Articles/TotalArticles, 2))

sheet_DataCollection |>
  select(`Review ID`, Citizen) |>
  distinct() |>
  mutate(Citizen = case_when(Citizen == "YES" ~ TRUE,
                             Citizen == "NO" ~ FALSE)) |>
  pull(Citizen) |>
  sum()
```

#### Site quantity

```{r site quantity plot}
#| fig-width: 12
#| fig-height: 3.5

siteQuantityPlot <- sheet_DataCollection |>
  mutate(`Site quantity` = as.numeric(`Site quantity`)) |>
  ggplot() +
  geom_histogram(aes(x = `Site quantity`),
                 binwidth = 0.25, fill = "aquamarine4", colour = "white",
                 linewidth = 2) +
  geom_vline(aes(xintercept = median(`Site quantity`, na.rm = TRUE)), 
             colour = "goldenrod2", linetype = 1, linewidth = 2) +
  scale_x_continuous(transform = "log10",
                     limits = c(5, 10000),
                     breaks = c(10, 25, 50, 100, 250, 500,
                                1000, 2500, 5000),
                     expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0), position = "right") +
  labs(y = "Site\nquantity", x = "") +
  theme(panel.grid = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA),
        axis.text.x = element_text(size = 23, angle = 90,
                                   vjust = 0.5, hjust = 1),
        axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.line.x = element_line(), 
        axis.title.y = element_text(size = 35, colour = "aquamarine4"))
siteQuantityPlot
ggsave(plot = siteQuantityPlot, filename = "Figures/Sites.png",
       height = 3, width = 12)
```

```{r site quantity statistics}
sheet_DataCollection |>
  mutate(`Site quantity` = as.numeric(`Site quantity`)) |>
  summarise(Sites = mean(`Site quantity`, na.rm = TRUE), 
            .by = `Review ID`) |>
  pull(Sites) |>
  median(na.rm = TRUE)
```

#### Study duration

```{r site duration figure}
#| fig-width: 12
#| fig-height: 3.5

studyDurationPlot <-
  sheet_DataCollection |>
    mutate(`Start month` = case_when(str_detect(`Start month`, "[:digit:]{5}") ~ `Start month`,
                                     .default = NA),
           `End month` = case_when(str_detect(`End month`, "[:digit:]{5}") ~ `End month`,
                                     .default = NA)) |>
  mutate(StartDay = as.numeric(as.Date(as.numeric(`Start month`))),
         EndDay = as.numeric(as.Date(as.numeric(`End month`)))) |>
  mutate(StudyDuration = EndDay - StartDay) |>
  mutate(StudyMonths = (StudyDuration/30)) |>
  mutate(StudyMonths = case_when(StudyMonths == 0 ~ 1,
                                 .default = StudyMonths)) |>
  
  ggplot() +
  geom_histogram(aes(x = StudyMonths), 
                 binwidth = 0.2, fill = "aquamarine4", colour = "white",
                 linewidth = 2) +
  geom_vline(aes(xintercept = median(StudyMonths, na.rm = TRUE)), 
             colour = "goldenrod2", linetype = 1, linewidth = 2) +
  labs(x = "", y = "Study\nduration") +
  scale_x_continuous(transform = "log10",
                     limits = c(0.5,725),
                     breaks = c(1, 6, 12, 60, 
                                120, 240, 480), 
                     labels = c("1 month", "6 months", "1 year", "5 years", 
                                "10 years", "20 years", "40 years"),
                     expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0), position = "right") +
  theme(panel.grid = element_blank(),
        panel.background = element_rect(fill='transparent', color=NA),
        plot.background = element_rect(fill='transparent', color=NA),
        axis.text.x = element_text(size = 23, angle = 90,
                                   vjust = 0.5, hjust = 1),
        axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.line.x = element_line(), 
        axis.title.y = element_text(size = 35, colour = "aquamarine4"))
studyDurationPlot
ggsave(plot = studyDurationPlot, filename = "Figures/Duration.png",
       height = 3.5, width = 12)
```

```{r combine sites and duration}
#| fig-width: 12
#| fig-height: 6

combinedStudyScale <- siteQuantityPlot / studyDurationPlot
combinedStudyScale <- combinedStudyScale +
  theme(panel.background = element_rect(fill='transparent', color = NA),
        plot.background = element_rect(fill='transparent', color = NA))
combinedStudyScale
ggsave(plot = combinedStudyScale, filename = "Figures/StudyScale.png",
       height = 6, width = 12, bg='transparent')
```
